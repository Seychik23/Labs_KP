// Метод дихотомии (половинного деления)
#include <iostream>
#include <cmath>

using namespace std;

// Функция
double func(double x) {
    
    return exp(-x) - sqrt(x - 1);
}

// Метод дихотомии для нахождения корня уравнения с заданной точностью
double find_root(double a, double b, double eps) {
    while (abs(b - a) > eps) { // Пока разность b и a больше заданной точности
        double mid = (a + b) / 2; // Находим середину интервала как новое приближение корня

        if (func(mid) == 0) {  // Если значение уравнения в середине интервала равно нулю, возвращаем mid как корень
            return mid;
        } else if (func(a) * func(mid) < 0) {  // Если знаки значений функции в точках a и mid разные
            b = mid;  // Обновляем верхнюю границу
        } else {
            a = mid;  // Иначе обновляем нижню
        }
    }

    return (a + b) / 2;  // Возвращаем середину интервала как приближенный корень уравнения
}

int main() {
    double a = 1.0; // Левая граница начального интервала
    double b = 3.0; // Правая граница начального интервала
    double epsilon = 1e-6; // Требуемая точность
    double root = find_root(a, b, epsilon); // Находим корень уравнения с использованием метода дихотомии
    cout << "Численный корень уравнения: " << root << endl; // Выводим найденный численный корень

    return 0;
}

