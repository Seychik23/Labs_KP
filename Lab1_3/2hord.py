# Метод хорд
import math

# Функция 
def func(x):
    return math.exp(-x) - math.sqrt(x - 1)

# Метод хорд для нахождения корня уравнения
def find_root(a, b, eps):
    if func(a) * func(b) >= 0:  # Проверка
        raise ValueError("Нет значений")  
        
    while abs(b - a) > eps:  # Пока разность b и a больше точности
        x = (a * func(b) - b * func(a)) / (func(b) - func(a))  # Вычисление новой аппроксимации корня уравнения
        
        if func(x) == 0:  
            return x
        elif func(a) * func(x) < 0:  # Если знаки значения функции в точках a и x разные
            b = x  # Обновляем верхнюю границу интервала
        else:
            a = x  # Иначе обновляем нижнюю границу интервала

    return (a + b) / 2  # Возвращаем середину интервала как приближенный корень уравнения
# Границы
a = 1.0 
b = 3.0  
epsilon = 1e-6  # Требуемая точность

root = find_root(a, b, epsilon)  # Поиск численного корня уравнения
print(f"Численный корень уравнения: {root}")  # Вывод результата
